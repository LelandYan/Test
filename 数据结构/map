#include <iostream>

using namespace std;
#define MaxInts 32767
#define MVNum 100 ///最大顶点数
#define Status int
#define OK 1
#define ERROR -1
#define MaxInt 0x7fffffff
#define OtherInfo int
typedef char VerTexType;
typedef int ArcType;
///邻接矩阵定义
typedef struct
{
    VerTexType vexs[MVNum];
    ArcType arcs[MVNum][MVNum];
    int vexnum,arcnum;
}AMGraph;
///邻接表定义
typedef struct ArcNode
{
    int adjvex; ///该边所指向的顶点的位置
    struct ArcNode * nextarc;///指向下一条边的指针
    OtherInfo info;///和边相关的信息
}ArcNode;
typedef struct VNode ///顶点信息
{
    VerTexType data;
    ArcNode * firstarc;
}VNode,AdjList[MVNum];
typedef struct
{
    AdjList vertices;
    int vexnum,arcnum;
}ALGraph;
bool visited[MVNum];
int LocateVex(AMGraph G,VerTexType v1)
{
    for(int i = 0; i < G.arcnum; i++)
    {
        if(G.vexs[i] == v1)return i;
    }
    return ERROR;
}
int LocateVex(ALGraph G,VerTexType v1)
{
    for(int i = 0; i < G.arcnum; i++)
    {
        if(G.vertices[i].data == v1)return i;
    }
    return ERROR;
}
///采用邻接矩阵表示法，创建带权无向图G
Status CreateUDN(AMGraph &G)
{
    cin >> G.vexnum>>G.arcnum; /// 输入总顶点数，总边数
    for(int i = 0; i < G.vexnum;i++)
        cin >> G.vexs[i];
    for(int i = 0; i < G.vexnum; i++)
        for(int j = 0; j <G.vexnum;j++)
            G.arcs[i][j] = MaxInt;
    int w,i,j;
    char v1,v2;
    for(int k = 0; k <G.arcnum; k++)
    {
        cin >> v1 >> v2 >> w;
        i = LocateVex(G,v1);
        j = LocateVex(G,v2);
//        cout << "i= " << i << " j= " << j <<endl;
        if(i == -1 || j == -1)cout << "边不存在,请重新输入\n";
        G.arcs[i][j] = w;
        G.arcs[j][i] = G.arcs[i][j];
    }
    return OK;
}
///采用邻接表表示法，创建无向图G
Status CreateUDG(ALGraph &G)
{
    cin >> G.vexnum >> G.arcnum;
    for(int i = 0; i < G.vexnum;i++)
    {
        cin >> G.vertices[i].data;
        G.vertices[i].firstarc = NULL;
    }
    int i,j,w;
    char v1,v2;
    for(int k = 0; k <G.arcnum;k++)
    {
        cin >> v1 >> v2 >> w;
        i = LocateVex(G,v1);
        j = LocateVex(G,v2);

        ArcNode* p1 = new ArcNode;
        p1->adjvex = j;
        p1->nextarc = G.vertices[i].firstarc;
        G.vertices[i].firstarc = p1;

        ArcNode* p2 = new ArcNode;
        p2->adjvex = i;
        p2->nextarc = G.vertices[j].firstarc;
        G.vertices[j].firstarc = p2;
    }
    return OK;
}
///采用邻接表表示图法进行深度优先搜索遍历
void DFS_AL(ALGraph G,int v)
{
    cout << v;
    visited[v]=true;
    ArcNode *p = G.vertices[v].firstarc;
    int w;
    while(p!=NULL)
    {
        w = p ->adjvex;
        if(!visited[w])DFS_AL(G,w);
         p = p->nextarc;
    }
}
///采用邻接矩阵表示图法深度优先搜索遍历
void DFS_AM(AMGraph G,int v)
{
    cout << v;
    visited[v] = true;
    for(int w = 0;w < G.vexnum;w++)
        if((G.arcs[v][w]!=0)&&(!visited[w]))DFS_AM(G,w);
}
///实现Dijkstar算法
int S[MVNum];///表示是否已经获得最短点集
int D[MVNum];
int path[MVNum];
void ShortestPath_DIJ(AMGraph G,int v0)
{
    int n = G.vexnum;
    for(int v = 0; v <n; v++)
    {
        S[v] = false;
        D[v] = G.arcs[v0][v];
        if(D[v] <MaxInt)path[v]=v0;
        else path[v]=-1;
    }
    S[v0]=true;
    D[v0]=0;

    for(int i = 1; i < n; i++)
    {
        int m = MaxInt;
        int v;
        for(int w = 0; w <n; w++)
        if(!S[w]&&D[w]<m){
            v = w;
            m = D[w];
        }
        S[v] = true;
        for(int w = 0; w < n; w++)
            if(!S[w]&&(D[v]+G.arcs[v][w]<D[w]))
        {
            D[w] = D[v] + G.arcs[v][w];
            path[w] = v;
        }
    }
}
int main()
{
    ///使用邻接矩阵创建图
//    AMGraph G;
//    CreateUDN(G);
//    for(int i = 0; i < G.vexnum; i++)
//    {
//        for(int j = 0; j < G.vexnum; j++)
//        {
//            cout << G.arcs[i][j] << " ";
//        }
//        cout << endl;
//    }
    ///使用邻接表创建图
    ALGraph G;
    CreateUDG(G);
    for(int i = 0; i < G.vexnum; i++)
    {
        cout << G.vertices[i].data;
        while(!G.vertices[i].firstarc)
        {
            cout << G.vertices[i].firstarc->adjvex << " ";
            G.vertices[i].firstarc = G.vertices[i].firstarc->nextarc;
        }
        cout << endl;
    }
    return 0;
}
